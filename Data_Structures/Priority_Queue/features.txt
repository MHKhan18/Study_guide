*)Priority Queue:
- ADT like normal queue except each element has a certain priority
- only supports comparable data
- elements with higher priority are removed before the ones with lower priority irrespective of insertion order


##)Heap:
A heap is a tree based DS that satisfies the heap invariant:
->If A is a parent node of B then A is ordered with respect to B for all nodes A,B in the heap
	=> Max heap / Min heap

#)Usage:
PQ are used anytime we need to dynamically fetch the next best or next worst element

#) Complexity:
Binary Heap Construction: O(n)
Polling: O(log(n))
Peeking: O(1)
Adding: O(log(n))
Naive removing: O(n)
Removing with hash table: O(log(n))
Naive contains: O(n)
Contains with hash table: O(1)

#) Binary Heap:
-> A binary tree is a complete binary tree that supports the heap invariant.
-> Binary heaps are represented using arrays:
    let i be index of parent
    left child = 2i+1
    right child = 2i+2

*) Adding:
-> insert at the end of the array to maintain complete binary tree
-> bubble up until heap property is satisfied

*) Removing:
-> swap the element to be removed with the last element of the array and bubble up/down the swapped element until the heap invariant is satisfied 
